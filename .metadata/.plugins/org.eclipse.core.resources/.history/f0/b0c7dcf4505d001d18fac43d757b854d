package kodlama.io.kodlama.io.Devs.business.concretes;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kodlama.io.kodlama.io.Devs.business.abstracts.ProgrammingLanguageService;
import kodlama.io.kodlama.io.Devs.business.requests.CreateProgrammingLanguageRequest;
import kodlama.io.kodlama.io.Devs.business.requests.DeleteProgrammingLanguageRequest;
import kodlama.io.kodlama.io.Devs.business.responses.GetAllProgrammingLanguagesResponse;
import kodlama.io.kodlama.io.Devs.dataAccess.abstracts.ProgrammingLanguageRepository;
import kodlama.io.kodlama.io.Devs.entities.concretes.ProgrammingLanguage;

@Service
public class ProgrammingLanguageManager implements ProgrammingLanguageService {
	private ProgrammingLanguageRepository programmingLanguageRepository;
	
	@Autowired
	public ProgrammingLanguageManager(ProgrammingLanguageRepository programmingLanguageRepository) {
		this.programmingLanguageRepository = programmingLanguageRepository;
	}

	@Override
	public void add(CreateProgrammingLanguageRequest createProgrammingLanguageRequest) throws Exception {
		
		ProgrammingLanguage programmingLanguage = new ProgrammingLanguage();
		programmingLanguage.setName(createProgrammingLanguageRequest.getName());
		
		List<ProgrammingLanguage> programmingLanguages = programmingLanguageRepository.findAll();
		
		for (ProgrammingLanguage pl : programmingLanguages) {
			if(pl.getName().equals(programmingLanguage.getName())) {
				throw new Exception("İsimler tekrar edemez.");
			}
		}
		
		if(programmingLanguage.getName().isEmpty()) {
			throw new Exception("Programlama dili boş geçilemez.");
		}
		
		this.programmingLanguageRepository.save(programmingLanguage);
	}

	@Override
	public void delete(DeleteProgrammingLanguageRequest deleteProgrammingLanguageRequest) {
		ProgrammingLanguage programmingLanguage = new ProgrammingLanguage();
		programmingLanguage.setId(deleteProgrammingLanguageRequest.getId());
		
		programmingLanguageRepository.delete(programmingLanguage);
	}

	/*@Override
	public void update(ProgrammingLanguage programmingLanguage) throws Exception {
		
		List<ProgrammingLanguage> programmingLanguages = programmingLanguageRepository.getAll();
		
		for (ProgrammingLanguage pl : programmingLanguages) {
			if(pl.getName().equals(programmingLanguage.getName())) {
				throw new Exception("İsimler tekrar edemez.");
			}
		}
		
		if(programmingLanguage.getName().isEmpty()) {
			throw new Exception("Programlama dili boş geçilemez.");
		}
		
		programmingLanguageRepository.update(programmingLanguage);
	}*/

	
	@Override
	public List<GetAllProgrammingLanguagesResponse> getAll() {
		
		List<ProgrammingLanguage> programmingLanguages = programmingLanguageRepository.findAll();
		List<GetAllProgrammingLanguagesResponse> programmingLanguagesResponse = new ArrayList<GetAllProgrammingLanguagesResponse>();
		
		for (ProgrammingLanguage programmingLanguage : programmingLanguages) {
			GetAllProgrammingLanguagesResponse responseItem = new GetAllProgrammingLanguagesResponse();
			responseItem.setId(programmingLanguage.getId());
			responseItem.setName(programmingLanguage.getName());
			
			programmingLanguagesResponse.add(responseItem);
		}
		
		return programmingLanguagesResponse;
	}

	/*@Override
	public ProgrammingLanguage getById(int id) {
		ProgrammingLanguage programmingLanguage = programmingLanguageRepository.getById(id);
		return programmingLanguage;
	}*/

}
