package kodlama.io.kodlama.io.Devs.dataAccess.concretes;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import kodlama.io.kodlama.io.Devs.dataAccess.abstracts.ProgrammingLanguageRepository;
import kodlama.io.kodlama.io.Devs.entities.concretes.ProgrammingLanguage;

public class InMemoryProgrammingLanguageRepository implements ProgrammingLanguageRepository {
	
	List<ProgrammingLanguage> programmingLanguages;
	
	

	public InMemoryProgrammingLanguageRepository() {
		programmingLanguages = new ArrayList<ProgrammingLanguage>();
		programmingLanguages.add(new ProgrammingLanguage(1, "C#"));
		programmingLanguages.add(new ProgrammingLanguage(2, "Java"));
		programmingLanguages.add(new ProgrammingLanguage(3, "Python"));
	}

	@Override
	public void add(ProgrammingLanguage programmingLanguage) {
		programmingLanguages.add(programmingLanguage);
	}

	@Override
	public void delete(ProgrammingLanguage programmingLanguage) {
		Optional<ProgrammingLanguage> deletedProgrammingLanguage = programmingLanguages.stream().filter((id) -> id.getId() == programmingLanguage.getId()).findFirst();
		
		programmingLanguages.remove(deletedProgrammingLanguage);
	}

	@Override
	public void update(ProgrammingLanguage programmingLanguage) {
		Optional<ProgrammingLanguage> updatedProgrammingLanguage = programmingLanguages.stream().filter((id) -> id.getId() == programmingLanguage.getId()).findFirst();
		int programmingLanguageIndex = Arrays.asList(programmingLanguages).indexOf(updatedProgrammingLanguage);
		programmingLanguages.set(programmingLanguageIndex, programmingLanguage);		
	}

	@Override
	public List<ProgrammingLanguage> getAll() {
		return programmingLanguages;
	}

	@Override
	public ProgrammingLanguage getById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

}
